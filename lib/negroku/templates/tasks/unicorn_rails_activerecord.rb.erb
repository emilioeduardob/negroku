##############################################
# Negorku Base Unicorn Configuration File
##############################################

# Load rails into the master before forking workers
# for super-fast worker spawn times
preload_app <%= fetch(:unicorn_preload) %>

working_directory "<%= "#{current_path}" %>"
pid "<%= fetch(:unicorn_pid) %>"
stderr_path "<%= "#{current_path}" %>/log/unicorn-error.log"
stdout_path "<%= "#{current_path}" %>/log/unicorn-out.log"

listen "<%= fetch(:unicorn_socket) %>"

worker_processes <%= fetch(:unicorn_workers) %>
timeout <%= fetch(:unicorn_workers_timeout) %>

# use correct Gemfile on restarts
before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = "#{app_path}/current/Gemfile"
end

before_fork do |server, worker|
  ##
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.

  defined?(ActiveRecord::Base) && ActiveRecord::Base.connection.disconnect!

  old_pid = "<%= fetch(:unicorn_pid) %>.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
      puts "Old master already dead"
    end
  end
end

after_fork do |server, worker|
  ##
  # Unicorn master loads the app then forks off workers - because of the way
  # Unix forking works, we need to make sure we aren't using any of the parent's
  # sockets, e.g. db connection

  ActiveRecord::Base.establish_connection
end
